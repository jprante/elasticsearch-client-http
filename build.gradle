
plugins {
    id "org.sonarqube" version "2.2"
    id "org.ajoberstar.github-pages" version "1.6.0-rc.1"
    id "org.xbib.gradle.plugin.jbake" version "1.1.0"
}

ext {
    user = 'jprante'
    name = 'elasticsearch-client-http'
    scmUrl = 'https://github.com/' + user + '/' + name
    scmConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    scmDeveloperConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
}

group = 'org.xbib.elasticsearch'
version = '2.2.1.0'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: 'org.ajoberstar.github-pages'

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    wagon
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile "org.elasticsearch:elasticsearch:2.2.1"
    testCompile "junit:junit:4.12"
    testCompile "net.java.dev.jna:jna:4.1.0"
    testCompile 'com.github.spullara.mustache.java:compiler:0.8.13'
    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:2.7"
    testCompile "org.apache.logging.log4j:log4j-core:2.7"
    wagon 'org.apache.maven.wagon:wagon-ssh-external:2.10'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all"  << "-profile" << "compact3"
}

task integrationTest(type: Test) {
    include '**/HttpBulkNodeTestSuite.class'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = configurations.integrationTestCompile
    classpath += configurations.integrationTestRuntime
    classpath += sourceSets.main.output
    classpath += sourceSets.test.output
    classpath += sourceSets.integrationTest.output
    outputs.upToDateWhen { false }
    systemProperty 'path.home', projectDir.absolutePath
    testLogging.showStandardStreams = true
}

integrationTest.mustRunAfter test
check.dependsOn integrationTest

clean {
    delete "data"
}

task javadocJar(type: Jar, dependsOn: classes) {
    from javadoc
    into "build/tmp"
    classifier 'javadoc'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    into "build/tmp"
    classifier 'sources'
}

artifacts {
    archives javadocJar, sourcesJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: 'gradle/publish.gradle'
apply from: 'gradle/sonarqube.gradle'
